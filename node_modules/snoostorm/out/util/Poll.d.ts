/// <reference types="node" />
import { EventEmitter } from "events";
declare type Awaitable<T> = Promise<T> | T;
interface PollEvents<T> {
    item: (item: T) => void;
    listing: (items: T[]) => void;
    end: () => void;
}
export default interface Poll<T extends object> {
    on<U extends keyof PollEvents<T>>(event: U, listener: PollEvents<T>[U]): this;
    once<U extends keyof PollEvents<T>>(event: U, listener: PollEvents<T>[U]): this;
    off<U extends keyof PollEvents<T>>(event: U, listener: PollEvents<T>[U]): this;
}
export interface PollConfiguration<T> {
    frequency: number;
    get: () => Awaitable<T[]>;
    identifier: keyof T;
}
export default class Poll<T extends object> extends EventEmitter {
    frequency: number;
    interval: NodeJS.Timeout;
    processed: Set<T[keyof T]>;
    constructor({ frequency, get, identifier }: PollConfiguration<T>);
    end(): void;
}
export {};
